// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BackEndAutomation.Tests.BBDTests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Demo")]
    public partial class DemoFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests/BBDTests", "Demo", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Demo.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2 My cal scenario")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        public async System.Threading.Tasks.Task _2MyCalScenario()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("2 My cal scenario", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("open the calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.WhenAsync("click 8 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
  await testRunner.AndAsync("click 2 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
  await testRunner.AndAsync("click = action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.ThenAsync("the calculator shows \"14\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1 My cal scenario")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        public async System.Threading.Tasks.Task _1MyCalScenario()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("1 My cal scenario", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
 await testRunner.GivenAsync("open the calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
 await testRunner.WhenAsync("click 8 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
  await testRunner.AndAsync("click 6 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
  await testRunner.AndAsync("click 2 number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
  await testRunner.AndAsync("click = action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
 await testRunner.ThenAsync("the calculator shows \"46\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3 My cal scenario")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        [NUnit.Framework.CategoryAttribute("UI")]
        [NUnit.Framework.TestCaseAttribute("8", "6", "14", "\"blahgdajgb\"", null)]
        [NUnit.Framework.TestCaseAttribute("7", "7", "14", "\"sagsafgagag\"", null)]
        [NUnit.Framework.TestCaseAttribute("7", "6", "13", "\"sgesgds\"", null)]
        [NUnit.Framework.TestCaseAttribute("5", "6", "11", "gssdgsdgsdg", null)]
        [NUnit.Framework.TestCaseAttribute("6", "6", "14", "The expected sum (14) is different than the actual sum REPLACEWITHACTUALSUM and b" +
            "ug needs to be open", null)]
        public async System.Threading.Tasks.Task _3MyCalScenario(string number1, string number2, string sum, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag1",
                    "UI"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("number1", number1);
            argumentsOfScenario.Add("number2", number2);
            argumentsOfScenario.Add("sum", sum);
            argumentsOfScenario.Add("errorMessage", errorMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("3 My cal scenario", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 49
 await testRunner.GivenAsync("open the calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 50
 await testRunner.WhenAsync(string.Format("click {0} number", number1), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 51
  await testRunner.AndAsync("click + action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
  await testRunner.AndAsync(string.Format("click {0} number", number2), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
  await testRunner.AndAsync("click = action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.ThenAsync(string.Format("the calculator shows \"{0}\", or show the \"{1}\" error message", sum, errorMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
